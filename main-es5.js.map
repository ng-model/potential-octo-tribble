{"version":3,"sources":["webpack:///src/app/hello-world-di/hello-world-di.component.ts","webpack:///src/app/hello-world-di/hello-world-di.component.html","webpack:///src/app/hello-world/hello-world.component.ts","webpack:///src/environments/environment.ts","webpack:///src/app/hello-world-interpolation/hello-world-interpolation.component.ts","webpack:///src/app/hello-world-interpolation/hello-world-interpolation.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/hello-world-template.component.ts","webpack:///src/app/logger.service.ts","webpack:///src/app/hello-world-ngif/hello-world-ngif.component.html","webpack:///src/app/hello-world-ngif/hello-world-ngif.component.ts","webpack:///src/app/hello-world-bindings/hello-world-bindings.component.ts","webpack:///src/app/hello-world-bindings/hello-world-bindings.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["HelloWorldDependencyInjectionComponent","logger","count","writeCount","onLogMe","HelloWorldComponent","environment","production","HelloWorldInterpolationComponent","message","AppComponent","AppModule","HelloWorldTemplateComponent","canEdit","onEditClick","Logger","console","warn","HelloWorldNgIfComponent","HelloWorldBindingsComponent","fontColor","sayHelloId","canClick","alert","sayMessage","bootstrapModule","err","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component } from '@angular/core';\nimport { Logger } from '../logger.service';\n\n@Component({\n  selector: 'hello-world-di',\n  templateUrl: './hello-world-di.component.html'\n})\nexport class HelloWorldDependencyInjectionComponent  {\n  count = 0;\n\n  constructor(private logger: Logger) {\n  }\n\n  onLogMe() {\n    this.logger.writeCount(this.count);\n    this.count++;\n  }\n}\n\n","<h2>Hello World: Dependency Injection</h2>\n<button (click)=\"onLogMe()\">Log me!</button>\n<p>Be sure to open the console to view the output!</p>","\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'hello-world',\n  template: `\n    <h2>Hello World</h2>\n    <p>This is my first component!</p>\n    `,\n})\nexport class HelloWorldComponent {\n  // The code in this class drives the component's behavior.\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component ({\n  selector: 'hello-world-interpolation',\n  templateUrl: './hello-world-interpolation.component.html'\n})\nexport class HelloWorldInterpolationComponent {\n    message = 'Hello, World!';\n}\n","<p>{{ message }}</p>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent { }\n","<h1>Understanding Angular</h1>\n<hello-world></hello-world>\n<hello-world-interpolation></hello-world-interpolation>\n<hello-world-bindings></hello-world-bindings>\n<hello-world-template></hello-world-template>\n<hello-world-ngif></hello-world-ngif>\n<hello-world-di></hello-world-di>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { HelloWorldComponent } from './hello-world/hello-world.component';\nimport { HelloWorldTemplateComponent } from './hello-world-template.component';\nimport { HelloWorldNgIfComponent } from './hello-world-ngif/hello-world-ngif.component';\nimport { HelloWorldDependencyInjectionComponent } from './hello-world-di/hello-world-di.component';\nimport { HelloWorldInterpolationComponent } from './hello-world-interpolation/hello-world-interpolation.component';\nimport { HelloWorldBindingsComponent } from './hello-world-bindings/hello-world-bindings.component';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HelloWorldComponent,\n    HelloWorldTemplateComponent,\n    HelloWorldNgIfComponent,\n    HelloWorldDependencyInjectionComponent,\n    HelloWorldInterpolationComponent,\n    HelloWorldBindingsComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'hello-world-template',\n    template: `\n        <h2>Hello World Template</h2>\n        <button (click)=\"onEditClick()\">Make text editable!</button>\n        <p [contentEditable]=\"canEdit\">{{ message }}</p>\n        `\n  })\n  export class HelloWorldTemplateComponent {\n    message = 'I am read only!';\n    canEdit = false;\n    onEditClick() {\n      this.canEdit = !this.canEdit;\n      if (this.canEdit) {\n        this.message = 'You can edit me!';\n      } else {\n        this.message = 'I am read only!';\n      }\n    }\n  }\n","import { Injectable } from '@angular/core';\n\n@Injectable({providedIn: 'root'})\nexport class Logger {\n  writeCount(count: number) {\n    console.warn(count);\n  }\n}\n","<h2>Hello World: ngIf!</h2>\n<button (click)=\"onEditClick()\">Make text editable!</button>\n<div *ngIf=\"canEdit; else noEdit\">\n    <p>You can edit the following paragraph.</p>\n</div>\n<ng-template #noEdit>\n    <p>The following paragraph is read only. Try clicking the button!</p>\n</ng-template>\n<p [contentEditable]=\"canEdit\">{{ message }}</p>\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'hello-world-ngif',\n    templateUrl: './hello-world-ngif.component.html'\n  })\nexport class HelloWorldNgIfComponent {\n  message = 'I\\'m read only!';\n  canEdit = false;\n\n  onEditClick() {\n    this.canEdit = !this.canEdit;\n    if (this.canEdit) {\n      this.message = 'You can edit me!';\n    } else {\n      this.message = 'I\\'m read only!';\n    }\n  }\n}\n\n","import { Component } from '@angular/core';\n\n@Component ({\n  selector: 'hello-world-bindings',\n  templateUrl: './hello-world-bindings.component.html'\n})\nexport class HelloWorldBindingsComponent {\n    fontColor = 'blue';\n    sayHelloId = 1;\n    canClick = false;\n    message = 'Hello, World';\n    sayMessage() {\n        alert(this.message);\n    }\n}\n","<button (click)=\"sayMessage()\" [disabled]=\"canClick\">Trigger alert message</button>\n<p [id]=\"sayHelloId\" [style.color]=\"fontColor\">You can set my color in the component!</p>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}